apply plugin: 'com.android.application'

def static releaseTime() {
    return new Date().format("yyyyMMdd-HHmm", TimeZone.getTimeZone(TimeZone.getDefault().getID()))
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    signingConfigs {
        release {
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
        }
        debug {
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
        }
    }
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner rootProject.ext.android.testInstrumentationRunner
        multiDexEnabled true
        flavorDimensions "versionCode"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled rootProject.ext.android.releaseConfuse
            shrinkResources rootProject.ext.android.releaseConfuse
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable rootProject.ext.android.releaseDebuggable
            jniDebuggable rootProject.ext.android.releaseDebuggable
            signingConfig signingConfigs.release
            renderscriptDebuggable rootProject.ext.android.releaseDebuggable
        }
        debug {
            minifyEnabled rootProject.ext.android.debugConfuse
            shrinkResources rootProject.ext.android.debugConfuse
            zipAlignEnabled false
            debuggable rootProject.ext.android.debugDebuggable
            jniDebuggable rootProject.ext.android.debugDebuggable
            signingConfig signingConfigs.debug
            renderscriptDebuggable rootProject.ext.android.debugDebuggable
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "MeorientAssistant-v${defaultConfig.versionCode}-${defaultConfig.versionName}-${releaseTime()}.apk"
        }
    }

    productFlavors {
        guanwang {
            minSdkVersion rootProject.ext.android.minSdkVersion
            applicationId rootProject.ext.android.applicationId
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            targetSdkVersion rootProject.ext.android.targetSdkVersion
            versionCode rootProject.ext.android.versionCode
            versionName rootProject.ext.android.versionName
            versionNameSuffix '.apk'
        }
    }
    compileOptions {
        sourceCompatibility rootProject.ext.java.sourceCompatibility
        targetCompatibility rootProject.ext.java.targetCompatibility
    }
}

dependencies {
    if (!isModule.toBoolean()) {
        implementation project(':module_login')
        implementation project(':module_home')
        implementation project(':module_main')
    }
}
